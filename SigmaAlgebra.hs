-- Set theory formalized in Haskell.
-- Not meant to be fast (or be actually run), it's just to make things formal.
-- Not using Data.Set so we don't have to use Ord types.

module SigmaAlgebra (
  SigmaAlgebra(BorelReals),
  asSet,
  isValidSigmaAlgebra,
  sigmaAlgebra
) where

import Sets

-- A few examples of sigma algebra on outcomes a.
--   BorelReals = The SA generated by the open sets of R.
--   Trivial = The SA that only consists of the empty set and Omega.
--   Discrete = A subset of the power set of a's that qualifies as SA.
data SigmaAlgebra a = BorelReals | SigmaAlgebra (Set (Set a))

-- All the sets within the sigma algebra F.
asSet :: SigmaAlgebra a -> Set (Set a)
asSet (SigmaAlgebra EmptySet) = EmptySet

-- Given a set of sets, return a sequence of sets made of the countable
-- unions of the elements in the set.
countableUnions :: Set (Set a) -> [Set a]
countableUnions sets = map unionAll listOfSets
    where listOfSets = [ add:cur | cur <- []:listOfSets, add <- (asList sets) ]

-- Is the given "candidate" sigma algebra a valid sigma algebra on the set?
-- See Definition 2.2 of DS-GA 1002 notes
isValidSigmaAlgebra :: Set w -> SigmaAlgebra w -> Bool
isValidSigmaAlgebra o f = 
    (forAll fset $ \s -> (o `minus` s) `member` fset)
    && (forAll (countableUnions fset) $ \u -> u `member` fset)
    && o `member` fset
    where fset = asSet f

-- Constructor that checks the set of sets against w
sigmaAlgebra :: Set w -> Set (Set w) -> SigmaAlgebra w
sigmaAlgebra o s | isValidSigmaAlgebra o (SigmaAlgebra s) = (SigmaAlgebra s)
                 | otherwise = error "Not a valid sigma-algebra for the set"

