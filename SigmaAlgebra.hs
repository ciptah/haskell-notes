-- Sigma-algebra, an important building block for probability space and measure.

module SigmaAlgebra (
  SigmaAlgebra(BorelReals),
  asSet,
  isValidSigmaAlgebra,
  sigmaAlgebra,
  allDisjoint,
  sampleSpace
) where

import Sets
import Data.Maybe (fromJust)

-- A few examples of sigma algebra on outcomes a.
--   BorelReals = The SA generated by the open sets of R.
--   Otherwise imagine having a sigma-algebra defined by the set of subsets.
data SigmaAlgebra a = BorelReals | SigmaAlgebra (Collection (Set a))
    deriving (Eq)

-- All the sets within the sigma algebra F.
-- Technically a sigma-algebra is a collection.
asSet :: SigmaAlgebra a -> Collection (Set a)
asSet (SigmaAlgebra x) = x

forAllSets sa = forAll (asSet sa)
thereExistSet sa = thereExists (asSet sa)

-- See Definition 2.2 of DS-GA 1002 notes probability_basics.pdf
isValidSigmaAlgebra :: (Eq w) => Set w -> SigmaAlgebra w -> Bool
isValidSigmaAlgebra o f = 
    o ∈ fset
    && (forAllSets f $ \s -> s ⊆ o &&  (o `minus` s) ∈ fset)
    && (forAll (countableUnions fset) $ \u -> u ∈ fset)
    where fset = asSet f

-- Because of the definition of a Sigma-Algebra, the original set Omega is
-- included as the maximal set contained in F. That means it is the singleton
-- member of Set-a's that is both included in the S.A. and covers all of S.A.
sampleSpace :: SigmaAlgebra a -> Set a
sampleSpace sa = fromJust $ singleton $ Everything % \event ->
  event ∈ (asSet sa) && (forAllSets sa $ \other -> other ⊆ event)

-- Constructor that checks the set of sets against w
sigmaAlgebra :: (Eq w) => Set w -> Set (Set w) -> SigmaAlgebra w
sigmaAlgebra o s | isValidSigmaAlgebra o candidate = candidate -- valid
                 | sampleSpace candidate /= o = error "Can't happen"
                 | otherwise = error "Not a valid sigma-algebra for the set"
  where candidate = SigmaAlgebra s

-- All "pairwise disjoint" sets of sets in the sigma-algebra.
allDisjoint :: (Eq a) => SigmaAlgebra a -> Set [Set a]
allDisjoint f = star (asSet f) % isAllDisjoint
