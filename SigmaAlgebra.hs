-- Sigma-algebra, an important building block for probability space and measure.

module SigmaAlgebra (
  SigmaAlgebra(BorelReals),
  asSet,
  isValidSigmaAlgebra,
  sigmaAlgebra,
  allDisjoint,
  sampleSpace
) where

import Sets

-- A few examples of sigma algebra on outcomes a.
--   BorelReals = The SA generated by the open sets of R.
--   Otherwise imagine having a sigma-algebra defined by the set of subsets.
data SigmaAlgebra a = BorelReals | SigmaAlgebra (Collection (Set a))
    deriving (Eq, Show)

-- All the sets within the sigma algebra F.
-- Technically a sigma-algebra is a collection.
asSet :: SigmaAlgebra a -> Collection (Set a)
asSet (SigmaAlgebra x) = x

-- See Definition 2.2 of DS-GA 1002 notes probability_basics.pdf
isValidSigmaAlgebra :: (Eq w) => Set w -> SigmaAlgebra w -> Bool
isValidSigmaAlgebra o f = 
    (forAll fset $ \s -> (o `minus` s) `member` fset)
    && (forAll (countableUnions fset) $ \u -> u `member` fset)
    && o `member` fset
    where fset = asSet f

-- Because of the definition of a Sigma-Algebra, the original set Omega is
-- implicitly included as the maximal set contained in F:
sampleSpace :: SigmaAlgebra a -> Set a
sampleSpace = unionAll . asList . asSet

-- Constructor that checks the set of sets against w
sigmaAlgebra :: (Eq w) => Set w -> Set (Set w) -> SigmaAlgebra w
sigmaAlgebra o s | isValidSigmaAlgebra o candidate = candidate -- valid
                 | sampleSpace candidate /= o = error "Can't happen"
                 | otherwise = error "Not a valid sigma-algebra for the set"
  where candidate = SigmaAlgebra s

-- All "pairwise disjoint" sets of sets in the sigma-algebra.
allDisjoint :: (Eq a) => SigmaAlgebra a -> Set [Set a]
allDisjoint f = star (asSet f) % isAllDisjoint
